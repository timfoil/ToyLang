// Extensively utilized the code in this guide https://tomassetti.me/antlr-mega-tutorial for help on setting up
// this gradle-file and antlr environment

apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'idea'


repositories {
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.7.2"
    compile "org.antlr:antlr4-runtime:4.7.2"
    testCompile 'junit:junit:4.12'
}

generateGrammarSource {
    arguments += ['-visitor', '-package', 'net.timfoil.lang.toy']
    outputDirectory = file("generated-src/antlr/main/net/timfoil/lang/toy")
}



sourceSets {
    generated {
        java.srcDir 'generated-src/antlr/main/'
    }
}

compileJava.source sourceSets.generated.java, sourceSets.main.java

task generateJNIHeader(type: JavaCompile) {
    doFirst {
        mkdir file("${buildDir}/jni-tmp")
    }

    classpath = sourceSets.main.compileClasspath
    destinationDir file("${buildDir}/jni")

    source += [sourceSets.main.java, sourceSets.generated.java]

    // -h specifies to compiler where to spit out jni headers, -d specifies where to place class files
    options.compilerArgs += ["-h", file("${buildDir}/jni"), "-d", file("${buildDir}/jni-tmp")]

    // delete class files generated by -d (not needed)
    doLast {
        delete file("${buildDir}/jni-tmp")
    }
}

compileJava.dependsOn generateGrammarSource
generateJNIHeader.dependsOn generateGrammarSource

clean {
    delete "generated-src"
}

idea {
    module {
        sourceDirs += file("generated-src/antlr/main")
    }
}
